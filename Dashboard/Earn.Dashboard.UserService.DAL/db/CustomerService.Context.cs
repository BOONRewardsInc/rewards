//
// Copyright (c) Microsoft Corporation. All rights reserved. 
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//

// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>

namespace Earn.Dashboard.CustomerService.DAL.db
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CustomerServiceEntities : DbContext
    {
        public CustomerServiceEntities()
            : base("name=CustomerServiceEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        [DbFunction("CustomerServiceEntities", "QueryEarnBurnLineItems")]
        public virtual IQueryable<QueryEarnBurnLineItems_Result> QueryEarnBurnLineItems()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<QueryEarnBurnLineItems_Result>("[CustomerServiceEntities].[QueryEarnBurnLineItems]()");
        }
    
        public virtual int CustomerServiceIssueEarnCredit(Nullable<System.Guid> userId, Nullable<int> amount, string explanation)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(System.Guid));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var explanationParameter = explanation != null ?
                new ObjectParameter("explanation", explanation) :
                new ObjectParameter("explanation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerServiceIssueEarnCredit", userIdParameter, amountParameter, explanationParameter);
        }
    
        public virtual ObjectResult<GetEarnBurnHistory_Result> GetEarnBurnHistory(Nullable<System.Guid> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEarnBurnHistory_Result>("GetEarnBurnHistory", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> MarkPermaPending(Nullable<System.Guid> transactionId, Nullable<int> tableIdentifier, Nullable<bool> permaPending)
        {
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("transactionId", transactionId) :
                new ObjectParameter("transactionId", typeof(System.Guid));
    
            var tableIdentifierParameter = tableIdentifier.HasValue ?
                new ObjectParameter("tableIdentifier", tableIdentifier) :
                new ObjectParameter("tableIdentifier", typeof(int));
    
            var permaPendingParameter = permaPending.HasValue ?
                new ObjectParameter("permaPending", permaPending) :
                new ObjectParameter("permaPending", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MarkPermaPending", transactionIdParameter, tableIdentifierParameter, permaPendingParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ResolveTransactionReview(Nullable<System.Guid> transactionId, Nullable<int> tableIdentifier, Nullable<bool> accept)
        {
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("transactionId", transactionId) :
                new ObjectParameter("transactionId", typeof(System.Guid));
    
            var tableIdentifierParameter = tableIdentifier.HasValue ?
                new ObjectParameter("tableIdentifier", tableIdentifier) :
                new ObjectParameter("tableIdentifier", typeof(int));
    
            var acceptParameter = accept.HasValue ?
                new ObjectParameter("accept", accept) :
                new ObjectParameter("accept", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ResolveTransactionReview", transactionIdParameter, tableIdentifierParameter, acceptParameter);
        }
    }
}