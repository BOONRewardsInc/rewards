//
// Copyright (c) Microsoft Corporation. All rights reserved. 
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//

// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>

namespace Users.Dal
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Core.Objects;
    using System.Data.Entity.Infrastructure;
    //using System.Data.Objects;
    //using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class UsersEntities : DbContext
    {
        public UsersEntities()
            : base("name=UsersEntities")
        {
        }
    
    	 public UsersEntities(string connectionString)
            : base(connectionString)
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<EmailSubscriptionDb> EmailSubscriptionDbs { get; set; }
        public DbSet<ExternalUserDb> ExternalUserDbs { get; set; }
        public DbSet<UserDb> UserDbs { get; set; }
        public DbSet<EmailUnsubscribeUrlDb> EmailUnsubscribeUrlDbs { get; set; }
        public DbSet<ConfirmationCodeDb> ConfirmationCodeDbs { get; set; }
    
        public virtual ObjectResult<CreateOrUpdateEmailSubscription_Result> CreateOrUpdateEmailSubscription(Nullable<System.Guid> userId, Nullable<int> partitionId, string locationId, Nullable<bool> isActive, string subscriptionType)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var subscriptionTypeParameter = subscriptionType != null ?
                new ObjectParameter("SubscriptionType", subscriptionType) :
                new ObjectParameter("SubscriptionType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CreateOrUpdateEmailSubscription_Result>("CreateOrUpdateEmailSubscription", userIdParameter, partitionIdParameter, locationIdParameter, isActiveParameter, subscriptionTypeParameter);
        }
    
        public virtual ObjectResult<UserDb> CreateOrUpdateUser(Nullable<System.Guid> id, Nullable<int> partitionId, string msId, string email, string phoneNumber, string name, string json, string source, Nullable<bool> isEmailConfirmed)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            var msIdParameter = msId != null ?
                new ObjectParameter("MsId", msId) :
                new ObjectParameter("MsId", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var jsonParameter = json != null ?
                new ObjectParameter("Json", json) :
                new ObjectParameter("Json", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var isEmailConfirmedParameter = isEmailConfirmed.HasValue ?
                new ObjectParameter("IsEmailConfirmed", isEmailConfirmed) :
                new ObjectParameter("IsEmailConfirmed", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserDb>("CreateOrUpdateUser", idParameter, partitionIdParameter, msIdParameter, emailParameter, phoneNumberParameter, nameParameter, jsonParameter, sourceParameter, isEmailConfirmedParameter);
        }
    
        public virtual ObjectResult<UserDb> CreateOrUpdateUser(Nullable<System.Guid> id, Nullable<int> partitionId, string msId, string email, string phoneNumber, string name, string json, string source, Nullable<bool> isEmailConfirmed, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            var msIdParameter = msId != null ?
                new ObjectParameter("MsId", msId) :
                new ObjectParameter("MsId", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var jsonParameter = json != null ?
                new ObjectParameter("Json", json) :
                new ObjectParameter("Json", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var isEmailConfirmedParameter = isEmailConfirmed.HasValue ?
                new ObjectParameter("IsEmailConfirmed", isEmailConfirmed) :
                new ObjectParameter("IsEmailConfirmed", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserDb>("CreateOrUpdateUser", mergeOption, idParameter, partitionIdParameter, msIdParameter, emailParameter, phoneNumberParameter, nameParameter, jsonParameter, sourceParameter, isEmailConfirmedParameter);
        }
    
        public virtual int DeleteEmailSubscriptions(Nullable<System.Guid> userId, Nullable<int> partitionId, string locationId, string subscriptionType)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            var subscriptionTypeParameter = subscriptionType != null ?
                new ObjectParameter("SubscriptionType", subscriptionType) :
                new ObjectParameter("SubscriptionType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEmailSubscriptions", userIdParameter, partitionIdParameter, locationIdParameter, subscriptionTypeParameter);
        }
    
        public virtual ObjectResult<GetEmailSubscriptions_Result> GetEmailSubscriptionsByLocationId(string locationId, Nullable<bool> isActive, string subscriptionType)
        {
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var subscriptionTypeParameter = subscriptionType != null ?
                new ObjectParameter("SubscriptionType", subscriptionType) :
                new ObjectParameter("SubscriptionType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmailSubscriptions_Result>("GetEmailSubscriptionsByLocationId", locationIdParameter, isActiveParameter, subscriptionTypeParameter);
        }
    
        public virtual ObjectResult<GetEmailSubscriptions_Result> GetEmailSubscriptionsByUserId(Nullable<System.Guid> userId, Nullable<int> partitionId, Nullable<bool> isActive, string subscriptionType)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var subscriptionTypeParameter = subscriptionType != null ?
                new ObjectParameter("SubscriptionType", subscriptionType) :
                new ObjectParameter("SubscriptionType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmailSubscriptions_Result>("GetEmailSubscriptionsByUserId", userIdParameter, partitionIdParameter, isActiveParameter, subscriptionTypeParameter);
        }
    
        public virtual ObjectResult<UserDb> GetUserByUserId(Nullable<System.Guid> id, Nullable<int> partitionId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserDb>("GetUserByUserId", idParameter, partitionIdParameter);
        }
    
        public virtual ObjectResult<UserDb> GetUserByUserId(Nullable<System.Guid> id, Nullable<int> partitionId, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserDb>("GetUserByUserId", mergeOption, idParameter, partitionIdParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> GetUserIdByExternalId(string externalId, Nullable<int> partitionId, Nullable<int> authProvider)
        {
            var externalIdParameter = externalId != null ?
                new ObjectParameter("ExternalId", externalId) :
                new ObjectParameter("ExternalId", typeof(string));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            var authProviderParameter = authProvider.HasValue ?
                new ObjectParameter("AuthProvider", authProvider) :
                new ObjectParameter("AuthProvider", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("GetUserIdByExternalId", externalIdParameter, partitionIdParameter, authProviderParameter);
        }
    
        public virtual ObjectResult<GetEmailSubscriptions_Result> GetEmailSubscriptions(Nullable<int> take, Nullable<bool> isActive, Nullable<int> fromPartitionId, Nullable<System.Guid> fromUserId, string fromLocationId, string subscriptionType)
        {
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var fromPartitionIdParameter = fromPartitionId.HasValue ?
                new ObjectParameter("FromPartitionId", fromPartitionId) :
                new ObjectParameter("FromPartitionId", typeof(int));
    
            var fromUserIdParameter = fromUserId.HasValue ?
                new ObjectParameter("FromUserId", fromUserId) :
                new ObjectParameter("FromUserId", typeof(System.Guid));
    
            var fromLocationIdParameter = fromLocationId != null ?
                new ObjectParameter("FromLocationId", fromLocationId) :
                new ObjectParameter("FromLocationId", typeof(string));
    
            var subscriptionTypeParameter = subscriptionType != null ?
                new ObjectParameter("SubscriptionType", subscriptionType) :
                new ObjectParameter("SubscriptionType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmailSubscriptions_Result>("GetEmailSubscriptions", takeParameter, isActiveParameter, fromPartitionIdParameter, fromUserIdParameter, fromLocationIdParameter, subscriptionTypeParameter);
        }
    
        public virtual ObjectResult<CreateOrUpdateEmailUnsubscribeUrl_Result> CreateOrUpdateEmailUnsubscribeUrl(Nullable<System.Guid> userId, Nullable<int> partitionId, string unsubscribeUrl)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            var unsubscribeUrlParameter = unsubscribeUrl != null ?
                new ObjectParameter("UnsubscribeUrl", unsubscribeUrl) :
                new ObjectParameter("UnsubscribeUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CreateOrUpdateEmailUnsubscribeUrl_Result>("CreateOrUpdateEmailUnsubscribeUrl", userIdParameter, partitionIdParameter, unsubscribeUrlParameter);
        }
    
        public virtual ObjectResult<EmailUnsubscribeUrl_Result> GetEmailUnsubscribeUrlByUserId(Nullable<System.Guid> userId, Nullable<int> partitionId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmailUnsubscribeUrl_Result>("GetEmailUnsubscribeUrlByUserId", userIdParameter, partitionIdParameter);
        }
    
        public virtual ObjectResult<EmailUnsubscribeUrl_Result> GetEmailUnsubscribeUrlToUpdate(Nullable<System.DateTime> updatedBefore)
        {
            var updatedBeforeParameter = updatedBefore.HasValue ?
                new ObjectParameter("UpdatedBefore", updatedBefore) :
                new ObjectParameter("UpdatedBefore", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmailUnsubscribeUrl_Result>("GetEmailUnsubscribeUrlToUpdate", updatedBeforeParameter);
        }
    
        public virtual ObjectResult<ExternalUserDb> CreateNotExistingExternalUser(Nullable<System.Guid> userId, string externalId, Nullable<int> partitionId, Nullable<byte> authProvider)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var externalIdParameter = externalId != null ?
                new ObjectParameter("ExternalId", externalId) :
                new ObjectParameter("ExternalId", typeof(string));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            var authProviderParameter = authProvider.HasValue ?
                new ObjectParameter("AuthProvider", authProvider) :
                new ObjectParameter("AuthProvider", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExternalUserDb>("CreateNotExistingExternalUser", userIdParameter, externalIdParameter, partitionIdParameter, authProviderParameter);
        }
    
        public virtual ObjectResult<ExternalUserDb> CreateNotExistingExternalUser(Nullable<System.Guid> userId, string externalId, Nullable<int> partitionId, Nullable<byte> authProvider, MergeOption mergeOption)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var externalIdParameter = externalId != null ?
                new ObjectParameter("ExternalId", externalId) :
                new ObjectParameter("ExternalId", typeof(string));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            var authProviderParameter = authProvider.HasValue ?
                new ObjectParameter("AuthProvider", authProvider) :
                new ObjectParameter("AuthProvider", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExternalUserDb>("CreateNotExistingExternalUser", mergeOption, userIdParameter, externalIdParameter, partitionIdParameter, authProviderParameter);
        }
    
        public virtual ObjectResult<ExternalUserDb> UpdateExternalUser(Nullable<System.Guid> newUserId, string externalId, Nullable<int> partitionId, Nullable<byte> authProvider)
        {
            var newUserIdParameter = newUserId.HasValue ?
                new ObjectParameter("NewUserId", newUserId) :
                new ObjectParameter("NewUserId", typeof(System.Guid));
    
            var externalIdParameter = externalId != null ?
                new ObjectParameter("ExternalId", externalId) :
                new ObjectParameter("ExternalId", typeof(string));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            var authProviderParameter = authProvider.HasValue ?
                new ObjectParameter("AuthProvider", authProvider) :
                new ObjectParameter("AuthProvider", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExternalUserDb>("UpdateExternalUser", newUserIdParameter, externalIdParameter, partitionIdParameter, authProviderParameter);
        }
    
        public virtual ObjectResult<ExternalUserDb> UpdateExternalUser(Nullable<System.Guid> newUserId, string externalId, Nullable<int> partitionId, Nullable<byte> authProvider, MergeOption mergeOption)
        {
            var newUserIdParameter = newUserId.HasValue ?
                new ObjectParameter("NewUserId", newUserId) :
                new ObjectParameter("NewUserId", typeof(System.Guid));
    
            var externalIdParameter = externalId != null ?
                new ObjectParameter("ExternalId", externalId) :
                new ObjectParameter("ExternalId", typeof(string));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            var authProviderParameter = authProvider.HasValue ?
                new ObjectParameter("AuthProvider", authProvider) :
                new ObjectParameter("AuthProvider", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExternalUserDb>("UpdateExternalUser", mergeOption, newUserIdParameter, externalIdParameter, partitionIdParameter, authProviderParameter);
        }
    
        public virtual int DeleteUser(Nullable<System.Guid> userId, Nullable<int> partitionId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUser", userIdParameter, partitionIdParameter);
        }
    
        public virtual int DeleteExternalUser(string externalId, Nullable<int> partitionId, Nullable<byte> authProvider)
        {
            var externalIdParameter = externalId != null ?
                new ObjectParameter("ExternalId", externalId) :
                new ObjectParameter("ExternalId", typeof(string));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            var authProviderParameter = authProvider.HasValue ?
                new ObjectParameter("AuthProvider", authProvider) :
                new ObjectParameter("AuthProvider", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteExternalUser", externalIdParameter, partitionIdParameter, authProviderParameter);
        }
    
        public virtual ObjectResult<UserDb> UpdateUserSuppressInfo(Nullable<System.Guid> id, Nullable<int> partitionId, string email, Nullable<bool> isSuppressed)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var isSuppressedParameter = isSuppressed.HasValue ?
                new ObjectParameter("IsSuppressed", isSuppressed) :
                new ObjectParameter("IsSuppressed", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserDb>("UpdateUserSuppressInfo", idParameter, partitionIdParameter, emailParameter, isSuppressedParameter);
        }
    
        public virtual ObjectResult<UserDb> UpdateUserSuppressInfo(Nullable<System.Guid> id, Nullable<int> partitionId, string email, Nullable<bool> isSuppressed, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var isSuppressedParameter = isSuppressed.HasValue ?
                new ObjectParameter("IsSuppressed", isSuppressed) :
                new ObjectParameter("IsSuppressed", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserDb>("UpdateUserSuppressInfo", mergeOption, idParameter, partitionIdParameter, emailParameter, isSuppressedParameter);
        }
    
        public virtual ObjectResult<ConfirmEntity_Result> ConfirmEntity(string userIdHash, Nullable<int> partitionId, Nullable<byte> entityType, Nullable<int> code)
        {
            var userIdHashParameter = userIdHash != null ?
                new ObjectParameter("UserIdHash", userIdHash) :
                new ObjectParameter("UserIdHash", typeof(string));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            var entityTypeParameter = entityType.HasValue ?
                new ObjectParameter("EntityType", entityType) :
                new ObjectParameter("EntityType", typeof(byte));
    
            var codeParameter = code.HasValue ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConfirmEntity_Result>("ConfirmEntity", userIdHashParameter, partitionIdParameter, entityTypeParameter, codeParameter);
        }
    
        public virtual ObjectResult<ConfirmationCodeDb> CreateConfirmationCode(string userIdHash, Nullable<int> partitionId, string entityId, Nullable<byte> entityType, Nullable<System.Guid> userId, Nullable<int> maxRetryCount, Nullable<System.DateTime> expiredDate)
        {
            var userIdHashParameter = userIdHash != null ?
                new ObjectParameter("UserIdHash", userIdHash) :
                new ObjectParameter("UserIdHash", typeof(string));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            var entityIdParameter = entityId != null ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(string));
    
            var entityTypeParameter = entityType.HasValue ?
                new ObjectParameter("EntityType", entityType) :
                new ObjectParameter("EntityType", typeof(byte));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var maxRetryCountParameter = maxRetryCount.HasValue ?
                new ObjectParameter("MaxRetryCount", maxRetryCount) :
                new ObjectParameter("MaxRetryCount", typeof(int));
    
            var expiredDateParameter = expiredDate.HasValue ?
                new ObjectParameter("ExpiredDate", expiredDate) :
                new ObjectParameter("ExpiredDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConfirmationCodeDb>("CreateConfirmationCode", userIdHashParameter, partitionIdParameter, entityIdParameter, entityTypeParameter, userIdParameter, maxRetryCountParameter, expiredDateParameter);
        }
    
        public virtual ObjectResult<ConfirmationCodeDb> CreateConfirmationCode(string userIdHash, Nullable<int> partitionId, string entityId, Nullable<byte> entityType, Nullable<System.Guid> userId, Nullable<int> maxRetryCount, Nullable<System.DateTime> expiredDate, MergeOption mergeOption)
        {
            var userIdHashParameter = userIdHash != null ?
                new ObjectParameter("UserIdHash", userIdHash) :
                new ObjectParameter("UserIdHash", typeof(string));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            var entityIdParameter = entityId != null ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(string));
    
            var entityTypeParameter = entityType.HasValue ?
                new ObjectParameter("EntityType", entityType) :
                new ObjectParameter("EntityType", typeof(byte));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var maxRetryCountParameter = maxRetryCount.HasValue ?
                new ObjectParameter("MaxRetryCount", maxRetryCount) :
                new ObjectParameter("MaxRetryCount", typeof(int));
    
            var expiredDateParameter = expiredDate.HasValue ?
                new ObjectParameter("ExpiredDate", expiredDate) :
                new ObjectParameter("ExpiredDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConfirmationCodeDb>("CreateConfirmationCode", mergeOption, userIdHashParameter, partitionIdParameter, entityIdParameter, entityTypeParameter, userIdParameter, maxRetryCountParameter, expiredDateParameter);
        }
    
        public virtual ObjectResult<ConfirmationCodeDb> GetConfirmEntity(string userIdHash, Nullable<int> partitionId, Nullable<byte> entityType)
        {
            var userIdHashParameter = userIdHash != null ?
                new ObjectParameter("UserIdHash", userIdHash) :
                new ObjectParameter("UserIdHash", typeof(string));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            var entityTypeParameter = entityType.HasValue ?
                new ObjectParameter("EntityType", entityType) :
                new ObjectParameter("EntityType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConfirmationCodeDb>("GetConfirmEntity", userIdHashParameter, partitionIdParameter, entityTypeParameter);
        }
    
        public virtual ObjectResult<ConfirmationCodeDb> GetConfirmEntity(string userIdHash, Nullable<int> partitionId, Nullable<byte> entityType, MergeOption mergeOption)
        {
            var userIdHashParameter = userIdHash != null ?
                new ObjectParameter("UserIdHash", userIdHash) :
                new ObjectParameter("UserIdHash", typeof(string));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            var entityTypeParameter = entityType.HasValue ?
                new ObjectParameter("EntityType", entityType) :
                new ObjectParameter("EntityType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConfirmationCodeDb>("GetConfirmEntity", mergeOption, userIdHashParameter, partitionIdParameter, entityTypeParameter);
        }
    
        public virtual ObjectResult<CreateOrUpdateMerchantSubscriptions_Result> CreateOrUpdateMerchantSubscriptions(Nullable<System.Guid> userId, Nullable<int> partitionId, string subscriptionType, string scheduleType, string preferences)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            var subscriptionTypeParameter = subscriptionType != null ?
                new ObjectParameter("SubscriptionType", subscriptionType) :
                new ObjectParameter("SubscriptionType", typeof(string));
    
            var scheduleTypeParameter = scheduleType != null ?
                new ObjectParameter("ScheduleType", scheduleType) :
                new ObjectParameter("ScheduleType", typeof(string));
    
            var preferencesParameter = preferences != null ?
                new ObjectParameter("Preferences", preferences) :
                new ObjectParameter("Preferences", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CreateOrUpdateMerchantSubscriptions_Result>("CreateOrUpdateMerchantSubscriptions", userIdParameter, partitionIdParameter, subscriptionTypeParameter, scheduleTypeParameter, preferencesParameter);
        }
    
        public virtual ObjectResult<GetMerchantSubscriptionsByUserId_Result> GetMerchantSubscriptionsByUserId(Nullable<System.Guid> userId, Nullable<int> partitionId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMerchantSubscriptionsByUserId_Result>("GetMerchantSubscriptionsByUserId", userIdParameter, partitionIdParameter);
        }
    
        public virtual int UnsubscribeMerchantSubscriptions(Nullable<System.Guid> userId, Nullable<int> partitionId, string subscriptionType)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            var subscriptionTypeParameter = subscriptionType != null ?
                new ObjectParameter("SubscriptionType", subscriptionType) :
                new ObjectParameter("SubscriptionType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UnsubscribeMerchantSubscriptions", userIdParameter, partitionIdParameter, subscriptionTypeParameter);
        }
    
        public virtual ObjectResult<GetEmailJobs_Result> GetEmailJobs(Nullable<int> take, Nullable<int> fromPartitionId, Nullable<System.Guid> fromUserId)
        {
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var fromPartitionIdParameter = fromPartitionId.HasValue ?
                new ObjectParameter("FromPartitionId", fromPartitionId) :
                new ObjectParameter("FromPartitionId", typeof(int));
    
            var fromUserIdParameter = fromUserId.HasValue ?
                new ObjectParameter("FromUserId", fromUserId) :
                new ObjectParameter("FromUserId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmailJobs_Result>("GetEmailJobs", takeParameter, fromPartitionIdParameter, fromUserIdParameter);
        }
    
        public virtual int UpdateEmailJob(Nullable<System.Guid> jobId)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmailJob", jobIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetConfirmEmailResendCountByUser(Nullable<System.Guid> userId, Nullable<int> partitionId, Nullable<byte> entityType, Nullable<System.DateTime> fromDateTime)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            var entityTypeParameter = entityType.HasValue ?
                new ObjectParameter("EntityType", entityType) :
                new ObjectParameter("EntityType", typeof(byte));
    
            var fromDateTimeParameter = fromDateTime.HasValue ?
                new ObjectParameter("FromDateTime", fromDateTime) :
                new ObjectParameter("FromDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetConfirmEmailResendCountByUser", userIdParameter, partitionIdParameter, entityTypeParameter, fromDateTimeParameter);
        }
    
        public virtual int LogUserConfirmEmailResend(Nullable<System.Guid> userId, Nullable<int> partitionId, Nullable<byte> entityType)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var partitionIdParameter = partitionId.HasValue ?
                new ObjectParameter("PartitionId", partitionId) :
                new ObjectParameter("PartitionId", typeof(int));
    
            var entityTypeParameter = entityType.HasValue ?
                new ObjectParameter("EntityType", entityType) :
                new ObjectParameter("EntityType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LogUserConfirmEmailResend", userIdParameter, partitionIdParameter, entityTypeParameter);
        }
    
        public virtual ObjectResult<GetScheduledEmails_Result> GetScheduledEmails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetScheduledEmails_Result>("GetScheduledEmails");
        }
    
        public virtual int UpdateEmailSchedule(Nullable<int> scheduleId, string campaignName, string status)
        {
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(int));
    
            var campaignNameParameter = campaignName != null ?
                new ObjectParameter("CampaignName", campaignName) :
                new ObjectParameter("CampaignName", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmailSchedule", scheduleIdParameter, campaignNameParameter, statusParameter);
        }
    
        public virtual ObjectResult<GetEmailSubscriptions_Result> GetEmailSubscriptionsByEmail(string email, Nullable<bool> isActive, string subscriptionType)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var subscriptionTypeParameter = subscriptionType != null ?
                new ObjectParameter("SubscriptionType", subscriptionType) :
                new ObjectParameter("SubscriptionType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmailSubscriptions_Result>("GetEmailSubscriptionsByEmail", emailParameter, isActiveParameter, subscriptionTypeParameter);
        }
    }
}